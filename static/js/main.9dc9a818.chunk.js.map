{"version":3,"sources":["WebAddress.js","AppBar.js","App.js","serviceWorker.js","index.js"],"names":["suggestions","label","WebAddress","state","domain","accessible","stateText","true","false","_this2","this","_this$props","props","classes","onClose","selectedValue","Object","objectWithoutProperties","react_default","a","createElement","className","root","downshift_esm","id","onChange","selection","setState","_ref2","getInputProps","getItemProps","getMenuProps","highlightedIndex","inputValue","isOpen","selectedItem","container","inputProps","InputProps","defaultDomain","ref","other","TextField_default","assign","objectSpread","inputRef","inputRoot","input","inputInput","variant","defaultValue","renderInput","fullWidth","placeholder","Paper_default","paper","square","value","deburr","trim","toLowerCase","inputLength","length","count","filter","suggestion","keep","slice","getSuggestions","map","index","_ref","itemProps","isHighlighted","isSelected","indexOf","MenuItem_default","key","selected","component","style","fontWeight","renderSuggestion","item","divider","Typography_default","gutterBottom","React","Component","withStyles","theme","flexGrow","height","paddingTop","spacing","unit","paddingBottom","paddingLeft","paddingRight","position","zIndex","marginTop","left","right","chip","margin","concat","flexWrap","width","text","grow","menuButton","marginLeft","marginRight","Fragment","CssBaseline_default","AppBar_default","Toolbar_default","IconButton_default","color","aria-label","Menu_default","Button_default","src_WebAddress_0","App","MuiThemeProvider_default","src_AppBar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9dc9a818.chunk.js","sourcesContent":["import React from 'react';\nimport './WebAddress.css';\nimport TextField from '@material-ui/core/TextField';\nimport deburr from 'lodash/deburr';\nimport keycode from 'keycode';\nimport Downshift from 'downshift';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Chip from '@material-ui/core/Chip';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst suggestions = [\n  { label: 'facebook.com' },\n  { label: 'wikileaks.ch' },\n  { label: 'twitter.com' },\n  { label: 'youtube.com' },\n  { label: 'google.com' },\n  { label: 'gmail.com' },\n  { label: 'cnn.com' },\n  { label: 'wikipedia.org' },\n  { label: 'dropbox.com' },\n  { label: 'yahoo.com' },\n];\n\nfunction renderInput(inputProps) {\n  const { InputProps, defaultDomain, classes, ref, ...other } = inputProps;\n\n  return (\n    <TextField\n      InputProps={{\n        inputRef: ref,\n        classes: {\n          root: classes.inputRoot,\n          input: classes.inputInput,\n        },\n        ...InputProps,\n      }}\n      {...other}\n      variant=\"outlined\"\n      defaultValue={defaultDomain}\n    />\n  );\n}\n\nfunction renderSuggestion({ suggestion, index, itemProps, highlightedIndex, selectedItem }) {\n  const isHighlighted = highlightedIndex === index;\n  const isSelected = (selectedItem || '').indexOf(suggestion.label) > -1;\n\n  return (\n    <MenuItem\n      {...itemProps}\n      key={suggestion.label}\n      selected={isHighlighted}\n      component=\"div\"\n      style={{\n        fontWeight: isSelected ? 500 : 400,\n      }}\n    >\n      {suggestion.label}\n    </MenuItem>\n  );\n}\nrenderSuggestion.propTypes = {\n  highlightedIndex: PropTypes.number,\n  index: PropTypes.number,\n  itemProps: PropTypes.object,\n  selectedItem: PropTypes.string,\n  suggestion: PropTypes.shape({ label: PropTypes.string }).isRequired,\n};\n\nfunction getSuggestions(value) {\n  const inputValue = deburr(value.trim()).toLowerCase();\n  const inputLength = inputValue.length;\n  let count = 0;\n\n  return inputLength === 0\n    ? []\n    : suggestions.filter(suggestion => {\n        const keep =\n          count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\n\n        if (keep) {\n          count += 1;\n        }\n\n        return keep;\n      });\n}\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    height: 250,\n    paddingTop: theme.spacing.unit * 5,\n    paddingBottom: theme.spacing.unit * 5,\n    paddingLeft: theme.spacing.unit * 5,\n    paddingRight: theme.spacing.unit * 5,\n  },\n  container: {\n    flexGrow: 1,\n    position: 'relative',\n  },\n  paper: {\n    position: 'absolute',\n    zIndex: 1,\n    marginTop: theme.spacing.unit,\n    left: 0,\n    right: 0,\n  },\n  chip: {\n    margin: `${theme.spacing.unit / 2}px ${theme.spacing.unit / 4}px`,\n  },\n  inputRoot: {\n    flexWrap: 'wrap',\n    variant: 'outlined',\n  },\n  inputInput: {\n    width: 'auto',\n    flexGrow: 1,\n  },\n  divider: {\n    height: theme.spacing.unit * 2,\n  },\n});\n\nclass WebAddress extends React.Component {\n  state = {\n    domain: 'yahoo.com',\n    accessible: true,\n    stateText: {\n      true: 'is accessible',\n      false: 'is not accessible',\n    }\n  };\n\n  render() {\n    const { classes, onClose, selectedValue, ...other } = this.props;\n    return (\n      <div className={classes.root}>\n        <Downshift\n        id=\"downshift-simple\"\n        onChange={selection => this.setState({domain: selection, accessible: false})}\n        >\n          {({\n            getInputProps,\n            getItemProps,\n            getMenuProps,\n            highlightedIndex,\n            inputValue,\n            isOpen,\n            selectedItem,\n          }) => (\n            <div className={classes.container}>\n              {renderInput({\n                fullWidth: true,\n                defaultDomain: this.state.domain,\n                classes,\n                InputProps: getInputProps({\n                  placeholder: 'Check a website or URL',\n                }),\n              })}\n              <div {...getMenuProps()}>\n                {isOpen ? (\n                  <Paper className={classes.paper} square>\n                    {getSuggestions(inputValue).map((suggestion, index) => \n                      renderSuggestion({\n                        suggestion,\n                        index,\n                        itemProps: getItemProps({ item: suggestion.label }),\n                        highlightedIndex,\n                        selectedItem,\n                      }),\n                    )}\n                  </Paper>\n                ) : null}\n              </div>\n            </div>\n          )}\n        </Downshift>\n        <div className={classes.divider} />\n        <div className={classes.divider} />\n        <br />\n        <br />\n        <br />\n        <br />\n        <Typography variant=\"h3\" gutterBottom>\n            Is {this.state.domain} accessible?\n        </Typography>\n        <Typography variant=\"h4\" gutterBottom>\n        { this.state.accessible ? 'Yes' : 'No' }&nbsp;\n        <u><b>{this.state.domain}</b></u>&nbsp;\n          <span className={ this.state.accessible ? 'Accessible-yes' : 'Accessible-no' }>\n            {this.state.stateText[this.state.accessible]}\n          </span> .\n        </Typography>\n      </div>\n    );\n  }\n};\n\nWebAddress.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(WebAddress);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Paper from '@material-ui/core/Paper';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport WebAddress from './WebAddress';\n\n\nconst styles = theme => ({\n  text: {\n    paddingTop: theme.spacing.unit * 2,\n    paddingLeft: theme.spacing.unit * 2,\n    paddingRight: theme.spacing.unit * 2,\n  },\n  paper: {\n    paddingBottom: 500,\n  },\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n});\n\nfunction SimpleAppBar(props) {\n  const { classes } = props;\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n            Check if a website is blocked within China\n          </Typography>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n      <Paper square className={classes.paper}>\n        <WebAddress/>\n      </Paper>\n    </React.Fragment>\n  );\n}\n\nSimpleAppBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleAppBar);\n","import React from 'react';\nimport './App.css';\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\nimport MyAppBar from './AppBar';\n\nconst App = () => (\n  <MuiThemeProvider>\n    <MyAppBar />\n  </MuiThemeProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}